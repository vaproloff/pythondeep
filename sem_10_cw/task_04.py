# –ó–∞–¥–∞–Ω–∏–µ No4
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –°–æ—Ç—Ä—É–¥–Ω–∏–∫.
# üìå –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞—Å—Å–æ–º —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
# üìå –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
#    ‚óã —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
#    ‚óã —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –≤—ã—á–∏—Å–ª—è–µ–º—ã–π –∫–∞–∫ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ü–∏—Ñ—Ä id –Ω–∞ —Å–µ–º—å

from random import randint
from task_03 import Person, Gender


class Employee(Person):
    __min_id = 100000
    __max_id = 999999
    __max_level = 7

    def __init__(self, name: str, surname: str, patronymic: str, age: int, gender: Gender, id_num: int):
        super().__init__(name, surname, patronymic, age, gender)
        self.id_num = id_num if self.__min_id <= id_num <= self.__max_id else randint(self.__min_id, self.__max_id)
        self.access_level = self._get_level()

    def _get_level(self):
        return sum(int(char) for char in str(self.id_num)) % self.__max_level


if __name__ == '__main__':
    bob_1 = Employee('Bob', 'Bobor', '', 34, Gender.m, 213123)
    bob_2 = Employee('Bob', 'Bobor', '', 34, Gender.m, 213123)

    print(hash(bob_1))
    print(hash(bob_2))
