# –ó–∞–¥–∞–Ω–∏–µ No2
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1.
# üìå –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
# üìå –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é-—É–≥–∞–¥–∞–π–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
# üìå –ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.

import random
from typing import Callable
from functools import wraps


def deco(func: Callable) -> Callable[[int, int], None]:
    min_number = 1
    max_number = 100
    min_guess_trials = 1
    max_guess_trials = 10

    @wraps(func)
    def wrapper(secret_num: int, guess_qty: int, *args, **kwargs):
        if not min_number <= secret_num <= max_number:
            secret_num = random.randint(min_number, max_number)
        if not min_guess_trials <= guess_qty <= max_guess_trials:
            guess_qty = random.randint(min_guess_trials, max_guess_trials)

        return func(secret_num, guess_qty, *args, **kwargs)

    return wrapper


@deco
def guess_num(secret_num: int, guess_qty: int):
    for i in range(1, guess_qty + 1):
        answer = int(input(f'–ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏: {i}. –£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100: '))
        if answer == secret_num:
            print('–í—ã —É–≥–∞–¥–∞–ª–∏!')
            return
        elif answer > secret_num:
            print('–ú–µ–Ω—å—à–µ')
        else:
            print('–ë–æ–ª—å—à–µ')


if __name__ == '__main__':
    guess_num(15, 4)
