# –ó–∞–¥–∞–Ω–∏–µ No5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å.
#    –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
#
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.

from datetime import datetime
import logging
import argparse

logging.basicConfig(filename='task_04.log', filemode='a', level=logging.ERROR, encoding='utf-8')
logger = logging.getLogger(__name__)

WEEKDAYS = ('–ø–æ–Ω', '–≤—Ç–æ', '—Å—Ä–µ', '—á–µ—Ç', '–ø—è—Ç', '—Å—É–±', '–≤–æ—Å')
MONTHS = ('—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫')


def get_date(input_date: str) -> datetime | None:
    try:
        day_count, weekday, month = input_date.split()
    except ValueError as e:
        logger.error(f'String {input_date} can\'t be splitted. ({e})')
        return None
    day_count = int(day_count[0])
    weekday = WEEKDAYS.index(weekday[:3])
    month = MONTHS.index(month[:3]) + 1
    i = 0
    for day in range(1, 31 + 1):
        date = datetime(day=day, month=month, year=datetime.now().year)
        if date.weekday() == weekday:
            i += 1
        if i == day_count:
            return date


def parse():
    parser = argparse.ArgumentParser(prog='get_data',
                                     description='Get datetime object from input string',
                                     epilog='get_date("1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è")')
    parser.add_argument('-c', '--count', default='1', help='–ö–∞–∫–æ–π –ø–æ —Å—á—ë—Ç—É –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
    parser.add_argument('-w', '--weekday', default=WEEKDAYS[datetime.now().weekday()], help='–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
    parser.add_argument('-m', '--month', default=MONTHS[datetime.now().month], help='–ú–µ—Å—è—Ü')
    args = parser.parse_args()
    return get_date(f'{args.count} {args.weekday}, {args.month}')


if __name__ == '__main__':
    print(parse())
