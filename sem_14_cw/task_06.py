# –ó–∞–¥–∞–Ω–∏–µ No6
# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å).
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
# üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã.

from user_management.project import User, Project

import pytest


@pytest.fixture
def create_users():
    return {User('–ö–∏—Ä–∏–ª–ª', 55, 1),
            User('–ò–≤–∞–Ω', 13, 2),
            User('–ê–Ω—Ç–æ–Ω', 12, 2),
            User('–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', 23, 4)}


def test_load(create_users):
    project = Project('users.json')
    assert project.users == create_users


@pytest.fixture
def temp_project(tmp_path):
    return Project(str(tmp_path / 'users.json'))


@pytest.fixture
def add_users(temp_project):
    temp_project.admin_user = User('–í–∞–ª–µ—Ä–∞', 1, 5)
    temp_project.add_user('–ö–∏—Ä–∏–ª–ª', 55, 1)
    temp_project.add_user('–ò–≤–∞–Ω', 13, 2)
    temp_project.add_user('–ê–Ω—Ç–æ–Ω', 12, 2)
    temp_project.add_user('–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', 23, 4)
    return temp_project


def test_adding_users(add_users, create_users):
    assert add_users.users == create_users


def test_entrance(add_users):
    add_users.entrance('–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', 23)
    assert add_users.admin_user == User('–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', 23, 4)


def test_print():
    name = '–í–∞–ª–µ—Ä–∞'
    user_id = 1
    user_level = 5
    assert str(User(name, user_id, user_level)) == f'name: {name}, id: {user_id}, level: {user_level}'


if __name__ == '__main__':
    pytest.main(['-vv'])
