# –ó–∞–¥–∞–Ω–∏–µ No2
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É.
# üìå –ü—Ä–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤ - –∞—Ä—Ö–∏–≤–æ–≤
# üìå list-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

# –ó–∞–¥–∞–Ω–∏–µ No3
# üìå –î–æ–±–∞–≤—å—Ç–µ –∫ –∑–∞–¥–∞—á–∞–º 1 –∏ 2 —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤.

# –ó–∞–¥–∞–Ω–∏–µ No4
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤ –∏–∑ –∑–∞–¥–∞—á–∏ 2.
# üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.


class Archive:
    """Singleton class. Keeps only one instance of the class. Saves previous arguments to lists."""
    _instance = None

    def __init__(self, num: int, text: str):
        """Takes integer num and string text, adds them to the class instance"""
        # print('init')
        self.num = num
        self.text = text

    def __new__(cls, *args, **kwargs):
        """
        Keeps old instance to previous instead of creating new one.
        Adds previous arguments to history lists
        """
        # print('new')
        # print(cls.__name__)
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.nums = []
            cls._instance.texts = []
        else:
            cls._instance.nums.append(cls._instance.num)
            cls._instance.texts.append(cls._instance.text)
        return cls._instance

    def __str__(self):
        """Returns all previous arguments and current ones"""
        return (f'Numbers: {", ".join(map(str, self.nums))}, {self.num}\n'
                f'Texts: {", ".join(self.texts)}, {self.text}')

    def __repr__(self):
        """Developer string representation method. Shows creating instance instruction."""
        return f'Archive({self.num}, "{self.text}")'


if __name__ == '__main__':
    elem_1 = Archive(34, 'text_1')
    elem_2 = Archive(56, 'text_2')
    print(elem_2)
    print(f'{elem_2 = }')
